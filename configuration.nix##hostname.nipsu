{ lib, config, pkgs, ... }:
{
  imports = [
    ./common.nix
  ];

  networking.hostName = "nipsu";

  system.stateVersion = "21.03";

  # UEFI boot
  boot.loader.systemd-boot.enable = true;
  #boot.loader.grub.grubDevice = "/dev/disk/by-id/ata-Samsung_SSD_860_EVO_2TB_S4X1NE0MA03611M";

  swapDevices = [
    {
      device = "/media/swapfile";
      size = 4096;
    }
  ];

  # Use local checkout of nixpkgs
  nix.nixPath = [
    "nixpkgs=/etc/nixpkgs"
    "nixos-config=/etc/nixos/configuration.nix"
  ];

  # Monero daemon P2P and RPC ports
  networking.firewall = {
    allowedTCPPorts = [ 18080 18081 ];
  };

  users.predefinedUsers = {
    # Add those users to syncthing group that you want to be able to access
    # (read-only) those files.
    jluttine = [ "wheel" "syncthing" ];
    meri = [ "syncthing" ];
  };

  # Put root home directory under a backed up partition.
  users.users.root.home = lib.mkForce "/var/lib/root";

  services = {

    calibre-web = {
      enable = true;
      openFirewall = false;
      listen.ip = "127.0.0.1";
      options = {
        # NOTE: This needs to be a string, otherwise the path is copied to nix
        # store
        calibreLibrary = "/var/lib/calibre-web/library";
        enableBookConversion = true;
        enableBookUploading = true;
      };
    };
    nginx.virtualHosts."kirjahylly.nipsu.fi" = {
      enableACME = true;
      forceSSL = true;
      locations = {
        "/" = {
          proxyPass = "http://127.0.0.1:8083/";
        };
      };
    };

    syncthing = {
      enable = true;
    };

    printServer = {
      enable = true;
    };

    mopidy = {
      enable = false;
    };

    tuhlaajapojat = {
      enable = true;
      mailserver = {
        enable = true;
      };
    };

    tv = {
      enable = true;
      domain = "tv.nipsu.fi";
      ssl = true;
    };

    diskrsync = {
      enable = true;
      compress = false;
      snapshotName = "lv-nixos-var-snapshot";
      volumeGroupName = "vg-nixos-var";
      logicalVolumeName = "lv-nixos-var";
      host = "jluttine@kapsi.fi";
      filename = "/home/users/jluttine/siilo/nipsu.img";
      startAt = "01:00";
    };

    radicale = {
      enable = true;
      virtualHost = "paivyri.nipsu.fi";
      ssl = true;
      # Create/modify htpasswd file with:
      #   htpasswd -B radicale-passwords username
      htpasswd = lib.readFile ./passwords/radicale-passwords;
    };

    emptyDomain = {
      enable = true;
      domain = "nipsu.fi";
    };

    # SSH server
    openssh = {
      enable = true;
      permitRootLogin = "no";
      ports = [6662];
      passwordAuthentication = false;
    };

    # Tiny tiny RSS server
    tt-rss = {
      enable = true;
      virtualHost = "feed.nipsu.fi";
      # MySQL didn't work, see: https://github.com/NixOS/nixpkgs/issues/35469
      database.type = "pgsql";
    };

    monero = {
      enable = true;
      mining = {
        enable = false;
      };
      limits = {
        download = 200;
        upload = 100;
      };
      rpc = {
        #address = "0.0.0.0";
        #address = "127.0.0.1";
        #
        # NOTE: There's no SSL verification support in wallets, so we cannot
        # rely on SSL, so we cannot use login credentials, so we cannot use this
        # outside intranet securely, so we shouldn't open the port in the
        # router.
        #
        # TODO: Set up SSL on both the node and the clients, then use
        # credentials.
        address = "192.168.1.10";
        port = 18081;
        restricted = true;
        ssl = {
          enable = true;
        };
      };
      #extraConfig = ''
      #  confirm-external-bind=1
      #'';
      extraConfig = ''
        confirm-external-bind=1
        in-peers=4
        out-peers=4
      '';
    };

    # nginx.virtualHosts."monero.nipsu.fi" = {
    #   enableACME = true;
    #   forceSSL = true;
    #   listen = [
    #     {
    #       addr = "0.0.0.0";
    #       port = 80;
    #       ssl = false;
    #     }
    #     {
    #       addr = "0.0.0.0";
    #       port = 443;
    #       ssl = true;
    #     }
    #     {
    #       addr = "0.0.0.0";
    #       port = 18089;
    #       ssl = true;
    #     }
    #   ];
    #   locations = {
    #     "/" = {
    #       proxyPass = "http://localhost:18088/";
    #     };
    #   };
    # };

    postgresql.package = pkgs.postgresql_9_6;

    # DNS for dynamic IP
    ddclient = let
      account = import ./passwords/ddclient-account.nix;
    in {
      enable = true;
      server = "api.cloudflare.com/client/v4";
      username = account.username;
      password = account.password;
      protocol = "cloudflare";
      domains = [];
      # nixpkgs doesn't support multiple zones so we have to use extraConfig
      extraConfig = let
        cfg = {
          "nipsu.fi" = [ "nipsu.fi" ];
          "tuhlaajapojat.fi" = [ "tuhlaajapojat.fi" ];
        };
      in lib.concatStrings (
        lib.mapAttrsToList (
          zone: domains: let
            domainsString = lib.concatStringsSep "," domains;
          in ''
            zone=${zone}
            ${domainsString}
          ''
        ) cfg
      );
    };

    xserver = {
      # # SDDM fails at least on nipsu with video projector. See:
      # #
      # # https://github.com/sddm/sddm/issues/699
      # #
      # # https://wiki.archlinux.org/index.php/SDDM#Screen_resolution_is_too_low
      #
      # # This would solve it:
      #
      # extraConfig = ''
      #   [General]
      #   EnableHiDPI=false
      # '';
      displayManager.lightdm.enable = true;
      desktopManager.plasma5.enable = true;
    };
  };

  programs = {
    mosh.enable = true;
    weechat.enable = true;
  };

  environment.systemPackages = with pkgs; [

    emacs

    # Disk space analysis
    ncdu

    # Sync video for among multiple clients
    syncplay

    # VLC was failing on July 23, 2020. Dragon seemed to work fine.
    dragon

    # Disk usage analysis on the command-line
    ncdu

    vlc

  ];
}
